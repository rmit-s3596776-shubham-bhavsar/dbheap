import java.io.*;
import java.util.*;

public class dbquery{
	static int pageSize = 0;
	static int totalpages = 0;
	static int noOfBuildings = 0;
	static String searchKey;
	static long startTime = 0;
	static long endTime = 0;
	static ArrayList<Page> heap = new ArrayList<Page>();
	
	
	public static void main(String[] args) {
		//validate input arguments
		if(args.length >= 2){
			try{
				pageSize = Integer.parseInt(args[1]);
			} 
			catch(NumberFormatException e){
				pageSize = 4096;
				System.out.println("Invalid page size given. Set to default value of 4096");
			}
			
			//get filename by concatenating heap with page size
			File f = new File("heap." + pageSize);
			
			searchKey = args[0];

			System.out.println("Reading input file");

			System.out.println("heap." + pageSize);
			startTime = System.currentTimeMillis();
			readFile(f);
			System.out.println("Searching Building name");
			search();
			endTime = System.currentTimeMillis();
			stdout();
					
		}
		else{
			System.out.println("Invalid arguement format, Use: java dbquery [text] [pagesize]");
			}
		}
	

	//Function to read binary file generated by dbload class
	public static void readFile(File f){
		FileInputStream fis = null;
		ObjectInputStream ois = null;
		try{
			Page page = null;
			fis = new FileInputStream(f);
			ois = new ObjectInputStream(fis);
			while(true){
				try{
					Object obj = ois.readObject();
					page = (Page)obj;
					//search one page at a time
					heap.add(page);
					search();
					//remove page after search is completed
					heap.remove(page);
				}
				catch(EOFException eoe){
					break;
				}
			}
		}
		catch(FileNotFoundException e){
			System.out.println(e.getMessage());
			System.out.println("File not found");
			System.exit(0);
		}
		catch(ClassNotFoundException e){
			e.printStackTrace();
		}
		catch(IOException e){
			e.printStackTrace();
		}
		finally{
			try{
				//close streams
				fis.close();
				ois.close();
			}
			catch(Exception ee){
			}
		}
	}

	//Search each page in the heap for building name
	public static void search(){
		//search through each page
		for (Page p:heap){
			//in each building record
			for(Building b:p.buildings){
				//if building name of object not null
				if(b.getBuildingName()!=null) {
					//check if it contains search key
					if(b.getBuildingName().contains(searchKey)){
						//display records
						System.out.println("Building Name: " + b.getBuildingName());
						System.out.println("Property ID: " + b.getPropID());
						System.out.println("Street Addr: " + b.getStreetAddr());
						System.out.println("Small area: " + b.getSmallArea());
						System.out.println("Predominant space: " + b.getPredominantSpace());
						System.out.println("Accessibility rating: " + b.getAccessRating());
						System.out.println("Census year: " + b.getCensusYear());
						System.out.println("Bicycle spaces: " + b.isHasBicycle());
						System.out.println("Location: " + b.getLocation());
						System.out.println();
						noOfBuildings++;
				}
			}
		}
			totalpages++;
		}
	}
	
	//function to display total time take
	public static void stdout(){
		System.out.println("Total Time: " + (endTime - startTime) +"ms");	
	}

}